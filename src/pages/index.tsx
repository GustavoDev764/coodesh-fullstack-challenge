/* eslint-disable jsx-a11y/alt-text */
/* eslint-disable @next/next/no-img-element */
import type { NextPage , GetServerSideProps } from 'next'
import Head from 'next/head'
import { useCallback, useState , useMemo, useEffect } from 'react'
import { v4 as uuidv4 } from 'uuid'
import InfiniteScroll from "react-infinite-scroll-component"
import axiosApi, { getApi } from '../Services/api'
import styles from '../../styles/Home.module.scss'
import { Api } from '../interfaces/api'
import CardLeft from '../Components/CardLeft'
import CardRight from '../Components/CardRight'
import { IArticlesData } from '../interfaces/data'

interface Props{
  data: IArticlesData[];  
  currentPage: number;
  perPage: number;
  total: number;
  appUrl: string;
}

const Home: NextPage<Props> = ({data,currentPage,perPage,total,appUrl}) => {

  const [listArticles, setListArticles] = useState<IArticlesData[]>([]);
  const [currentPageData, setCurrentPageData] = useState(1);  
  const [perPageData, setPerPageData] = useState(10);
  const [totalData, setTotalData] = useState(10);
  const [isLoading, setIsLoading] = useState(false);

  const [orderBy, setOrdeBy] = useState('ASC');
  const [search, setSearch] = useState(''); 

  const api = getApi(appUrl);

  const hasNextPage = useMemo(()=>{
    try {
        if(Math.ceil(totalData/perPageData) > currentPageData){
          return true;
        }
        return false;
    } catch (error) {
      console.log('error: ',error);
      return false;
    }
  },[perPageData,totalData , currentPageData]);  

  const findArticles = useCallback(()=>{
      setIsLoading(true);
      api
        .get<Api<IArticlesData>>(`/articles?search=${search}&orderBy=${orderBy}`)
        .then((res) => {
          const {data, current_page, per_page, total} = res.data.data;

          setCurrentPageData(current_page);
          setListArticles(data);
          setPerPageData(per_page);
          setTotalData(total);

          setIsLoading(false);
        })
        .catch((error) => {
          setIsLoading(false);
        });
   
  },[api, orderBy, search]);

  const nextPage = useCallback(()=>{
    if(hasNextPage){  
      setIsLoading(true);
      
      api
        .get<Api<IArticlesData>>(`/articles?page=${currentPageData+1}`)
        .then((res) => {
          const {data, current_page, per_page, total} = res.data.data;

          setCurrentPageData(current_page);
          setListArticles((old)=> [...old,...data]);
          setPerPageData(per_page);
          setTotalData(total);

          setIsLoading(false);
        })
        .catch((error) => {
          setIsLoading(false);
        });
    }
  },[api, currentPageData, hasNextPage]);

  const handleOrdeBy = useCallback((e)=>{
    setOrdeBy(e.target.value);
    //findArticles();
  },[]);

  useEffect(()=>{
    setCurrentPageData(currentPage);  
    setPerPageData(perPage);
    setTotalData(total);
    setListArticles(data);
  },[currentPage, data, perPage, total]);
  


  return (
    <div>
      <Head>
        <title>Articles</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <nav className="navbar navbar-light bg-light">
        <a className="navbar-brand"></a>
        <div className="form-inline">
          <input className="form-control mr-sm-2" onChange={(e)=>{setSearch(e.target.value)}} type="search" placeholder="Search" aria-label="Search"/>
          <button onClick={findArticles} className="btn btn-outline-success my-2 my-sm-0" type="button">Search</button>
          <div className="input-group ml-2">
              <select onChange={handleOrdeBy} value={orderBy} className="custom-select" id="inputGroupSelect04" aria-label="Example select with button addon">                
                <option value="ASC">Mais Antigas</option>
                <option value="DESC">Mais Novas</option>
              </select>              
          </div>
        </div>
      </nav>


              
      <InfiniteScroll
            dataLength={listArticles.length}
            next={nextPage}
            style={{overflow:'hidden'}}
            hasMore={hasNextPage}
            loader={
              <div className="d-flex justify-content-center p-2 mb-2">
                <div className="spinner-border text-primary" role="status">
                  <span className="sr-only">Loading...</span>
                </div>
              </div>
            }
          >
            {listArticles.map((ele, index) => {
              return index % 2 === 0 ?
               <CardLeft key={`${uuidv4()}`} item={ele} styles={styles}/>
               : <CardRight key={`${uuidv4()}`} item={ele} styles={styles}/> 
            })}
      </InfiniteScroll>
          
    </div>
  )
}

export default Home

export const getServerSideProps:GetServerSideProps = async () => {
  
  let data:IArticlesData[] = [];  
  let currentPage = 1;
  let perPage = 10;
  let total = 0;

  try {
    const response = await axiosApi.get<Api<IArticlesData>>(`articles`);
    data = response?.data?.data.data ?? [];     
    currentPage = response.data.data.current_page;    
    perPage = response.data.data.per_page;    
    total = response.data.data.total;    
  } catch (error) {
    console.log("error: ",error);
  }

  return{
    props:{      
      currentPage,
      perPage,
      total,
      data,
      appUrl: `${process.env.APP_URL}`
    }
  };
}
